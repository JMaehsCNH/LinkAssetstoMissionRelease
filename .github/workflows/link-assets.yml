- name: Query PREC missions/releases and add asset web links (enhanced JQL)
  run: |
    python - <<'PY'
    import os, sys, json, time, re
    import requests

    JIRA_SITE           = os.environ["JIRA_SITE"].rstrip("/")
    JIRA_EMAIL          = os.environ["JIRA_EMAIL"]
    JIRA_API_TOKEN      = os.environ["JIRA_API_TOKEN"]
    ASSETS_WORKSPACE_ID = os.environ["ASSETS_WORKSPACE_ID"]
    OBJECT_SCHEMA_ID    = os.environ["OBJECT_SCHEMA_ID"]
    JQL                 = os.environ["JQL"]

    AUTH = (JIRA_EMAIL, JIRA_API_TOKEN)
    H    = {"Accept":"application/json","Content-Type":"application/json"}

    def die(msg, r=None):
        if r is not None:
            print(f"{msg} ({r.status_code}): {r.text}", file=sys.stderr)
        else:
            print(msg, file=sys.stderr)
        sys.exit(1)

    # ---------- Enhanced JQL search helpers ----------
    def search_issues_get(jql, next_token=None, fields=None, max_results=100):
        """
        GET /rest/api/3/search/jql with cursor pagination
        """
        url = f"{JIRA_SITE}/rest/api/3/search/jql"
        params = {"jql": jql, "maxResults": max_results}
        if fields:
            # comma-separated list per Atlassian docs
            params["fields"] = ",".join(fields)
        if next_token:
            params["nextPageToken"] = next_token
        r = requests.get(url, headers=H, auth=AUTH, params=params)
        return r

    def search_issues_post(jql, next_token=None, fields=None, max_results=100):
        """
        POST /rest/api/3/search/jql with cursor pagination (fallback)
        """
        url = f"{JIRA_SITE}/rest/api/3/search/jql"
        body = {"jql": jql, "maxResults": max_results}
        if fields:
            body["fields"] = fields
        if next_token:
            body["nextPageToken"] = next_token
        r = requests.post(url, headers=H, auth=AUTH, json=body)
        return r

    def enhanced_search(jql, wanted_fields):
        """
        Generator over issues using the enhanced endpoint with fallback
        """
        next_token = None
        while True:
            # try GET first (preferred), then fallback to POST if needed
            r = search_issues_get(jql, next_token=next_token, fields=wanted_fields)
            if r.status_code == 410 or r.status_code == 404 or r.status_code == 405:
                r = search_issues_post(jql, next_token=next_token, fields=wanted_fields)
            if r.status_code != 200:
                die("Jira enhanced search failed", r)
            page = r.json()
            for issue in page.get("issues", []):
                yield issue
            next_token = page.get("nextPageToken")
            if not next_token:
                break

    # ---------- Issue detail helpers ----------
    def get_issue_desc(key):
        url = f"{JIRA_SITE}/rest/api/3/issue/{key}?fields=description"
        r = requests.get(url, headers=H, auth=AUTH)
        if r.status_code != 200:
            die(f"Failed to read description for {key}", r)
        return r.json().get("fields",{}).get("description") or ""

    def list_remote_links(key):
        url = f"{JIRA_SITE}/rest/api/3/issue/{key}/remotelink"
        r = requests.get(url, headers=H, auth=AUTH)
        if r.status_code != 200:
            die(f"Failed to list remote links for {key}", r)
        links = r.json() if isinstance(r.json(), list) else []
        existing = set()
        for l in links:
            obj = l.get("object",{})
            title = obj.get("title") or ""
            url   = obj.get("url") or ""
            if title and url:
                existing.add((title.strip(), url.strip()))
        return existing

    def create_remote_link(key, title, url_):
        url = f"{JIRA_SITE}/rest/api/3/issue/{key}/remotelink"
        r = requests.post(url, headers=H, auth=AUTH, json={"object":{"title": title, "url": url_}})
        if r.status_code not in (200,201):
            die(f"Failed to create remote link for {key}", r)

    # ---------- Assets lookup (schema 3) ----------
    def aql_lookup(category, name):
        aql = (
            f'objectSchemaId = {OBJECT_SCHEMA_ID} '
            f'AND objectType = "{category}" '
            f'AND (Name = "{name}" OR "Serial Number" = "{name}")'
        )
        url = f"{JIRA_SITE}/jsm/assets/workspace/{ASSETS_WORKSPACE_ID}/v1/object/aql"
        r = requests.post(url, headers=H, auth=AUTH, json={"qlQuery": aql, "page":1, "resultPerPage":2})
        if r.status_code != 200:
            die("Assets AQL search failed", r)
        data = r.json() or {}
        objs = data.get("objectEntries") or []
        return objs[0] if objs else None

    def asset_url(object_id:int):
        return f"{JIRA_SITE}/jira/servicedesk/assets/objects/{object_id}"

    # ---------- Parse the bullet tree ----------
    bullet_re = re.compile(r"^(?:-|\*)\s+(?P<cat>.+?)\s*$")
    child_re  = re.compile(r"^\s{2,}(?:-|\*)\s+(?P<name>.+?)\s*$")

    def extract_pairs(desc_text):
        pairs = []
        current_cat = None
        text = desc_text if isinstance(desc_text, str) else ""
        for raw in (text or "").splitlines():
            line = raw.rstrip()
            m1 = bullet_re.match(line)
            if m1:
                current_cat = m1.group("cat").strip()
                continue
            m2 = child_re.match(line)
            if m2 and current_cat:
                nm = m2.group("name").strip()
                if nm:
                    pairs.append((current_cat, nm))
        return pairs

    # ---------- Main ----------
    wanted_fields = ["summary","description","issuetype","project","status"]
    total_scanned = 0

    for issue in enhanced_search(JQL, wanted_fields):
        key    = issue["key"]
        fields = issue.get("fields") or {}
        proj   = fields.get("project", {}).get("key")
        itype  = fields.get("issuetype", {}).get("name")
        status = fields.get("status", {}).get("name")

        if proj != "PREC" or itype not in ("Mission","Release") or status == "Validated (Complete)":
            continue

        desc = fields.get("description") or ""
        pairs = extract_pairs(desc if isinstance(desc, str) else get_issue_desc(key))
        if not pairs:
            print(f"{key}: no asset tree detected; skipping")
            continue

        existing = list_remote_links(key)
        for cat, nm in pairs:
            obj = aql_lookup(cat, nm)
            if not obj:
                print(f"{key}: not found in Assets (schema 3) → {cat} / {nm}")
                continue
            oid = obj.get("id")
            url_ = asset_url(oid)
            title = f"{cat} - {nm}"

            if (title, url_) in existing:
                print(f"{key}: link already exists → {title}")
                continue

            create_remote_link(key, title, url_)
            existing.add((title, url_))
            print(f"{key}: linked {title}")

        total_scanned += 1
        time.sleep(0.2)  # be nice to the API

    print(f"Done. Issues scanned: {total_scanned}")
    PY
