name: PREC | Link Assets from Description

on:
  workflow_dispatch: {}
  schedule:
    - cron: "16 3 * * *"  # daily at 03:16 UTC (adjust as needed)

jobs:
  scan-and-link:
    runs-on: ubuntu-latest
    env:
      # ---- FIXED BASE URL ----
      JIRA_SITE: https://cnhpd.atlassian.net

      # ---- REQUIRED SECRETS ----
      JIRA_EMAIL: ${{ secrets.JIRA_EMAIL }}
      JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
      ASSETS_WORKSPACE_ID: ${{ secrets.ASSETS_WORKSPACE_ID }}

      # ---- CONFIG ----
      OBJECT_SCHEMA_ID: "3"   # PV Assets
      JQL: >
        project = PREC
        AND issuetype in ("Mission","Release")
        AND status != "Validated (Complete)"

    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: pip install requests

      - name: Query PREC missions/releases and add asset web links
        run: |
          python - <<'PY'
          import os, sys, json, time, re
          import requests

          JIRA_SITE           = os.environ["JIRA_SITE"].rstrip("/")
          JIRA_EMAIL          = os.environ["JIRA_EMAIL"]
          JIRA_API_TOKEN      = os.environ["JIRA_API_TOKEN"]
          ASSETS_WORKSPACE_ID = os.environ["ASSETS_WORKSPACE_ID"]
          OBJECT_SCHEMA_ID    = os.environ["OBJECT_SCHEMA_ID"]
          JQL                 = os.environ["JQL"]

          AUTH = (JIRA_EMAIL, JIRA_API_TOKEN)
          H    = {"Accept":"application/json","Content-Type":"application/json"}

          def die(msg, r=None):
              if r is not None:
                  print(f"{msg} ({r.status_code}): {r.text}", file=sys.stderr)
              else:
                  print(msg, file=sys.stderr)
              sys.exit(1)

          # ---- Jira Search (paginate) ----
          def search_issues(jql, start_at=0, max_results=50):
              url = f"{JIRA_SITE}/rest/api/3/search"
              payload = {
                  "jql": jql,
                  "startAt": start_at,
                  "maxResults": max_results,
                  "fields": ["summary","description","issuetype","project","status"]
              }
              r = requests.post(url, headers=H, auth=AUTH, json=payload)
              if r.status_code != 200:
                  die("Jira search failed", r)
              return r.json()

          # ---- Read/Update Description ----
          def get_issue_desc(key):
              url = f"{JIRA_SITE}/rest/api/3/issue/{key}?fields=description"
              r = requests.get(url, headers=H, auth=AUTH)
              if r.status_code != 200:
                  die(f"Failed to read description for {key}", r)
              return r.json().get("fields",{}).get("description") or ""

          def set_issue_desc(key, text):
              url = f"{JIRA_SITE}/rest/api/3/issue/{key}"
              r = requests.put(url, headers=H, auth=AUTH, json={"fields":{"description": text}})
              if r.status_code != 204:
                  die(f"Failed to update description for {key}", r)

          # ---- Remote Links (avoid duplicates) ----
          def list_remote_links(key):
              url = f"{JIRA_SITE}/rest/api/3/issue/{key}/remotelink"
              r = requests.get(url, headers=H, auth=AUTH)
              if r.status_code != 200:
                  die(f"Failed to list remote links for {key}", r)
              links = r.json() if isinstance(r.json(), list) else []
              existing = set()
              for l in links:
                  obj = l.get("object",{})
                  title = obj.get("title") or ""
                  url   = obj.get("url") or ""
                  if title and url:
                      existing.add((title.strip(), url.strip()))
              return existing

          def create_remote_link(key, title, url_):
              url = f"{JIRA_SITE}/rest/api/3/issue/{key}/remotelink"
              r = requests.post(url, headers=H, auth=AUTH, json={"object":{"title": title, "url": url_}})
              if r.status_code not in (200,201):
                  die(f"Failed to create remote link for {key}", r)

          # ---- Assets lookup (scoped to PV Assets schemaId=3) ----
          def aql_lookup(category, name):
              # Adjust attribute names if yours differ ("Name", "Serial Number", "SN", etc.)
              aql = (
                  f'objectSchemaId = {OBJECT_SCHEMA_ID} '
                  f'AND objectType = "{category}" '
                  f'AND (Name = "{name}" OR "Serial Number" = "{name}")'
              )
              url = f"{JIRA_SITE}/jsm/assets/workspace/{ASSETS_WORKSPACE_ID}/v1/object/aql"
              r = requests.post(url, headers=H, auth=AUTH, json={"qlQuery": aql, "page":1, "resultPerPage":2})
              if r.status_code != 200:
                  die("Assets AQL search failed", r)
              data = r.json() or {}
              objs = data.get("objectEntries") or []
              return objs[0] if objs else None

          def asset_url(object_id:int):
              # Verify once by opening an asset in your site; adjust path if needed.
              return f"{JIRA_SITE}/jira/servicedesk/assets/objects/{object_id}"

          # ---- Parse the bullet tree from Description ----
          # Accepts blocks like:
          # - Displays
          #   - 11100411
          # - CSS Loggers
          #   - 000005
          bullet_re = re.compile(r"^(?:-|\*)\s+(?P<cat>.+?)\s*$")
          child_re  = re.compile(r"^\s{2,}(?:-|\*)\s+(?P<name>.+?)\s*$")

          def extract_pairs(desc_text):
              pairs = []
              current_cat = None
              # Description may be Markdown string (Team-managed) or ADF (Company-managed).
              text = desc_text if isinstance(desc_text, str) else ""
              for raw in (text or "").splitlines():
                  line = raw.rstrip()
                  m1 = bullet_re.match(line)
                  if m1:
                      current_cat = m1.group("cat").strip()
                      continue
                  m2 = child_re.match(line)
                  if m2 and current_cat:
                      nm = m2.group("name").strip()
                      if nm:
                          pairs.append((current_cat, nm))
              return pairs

          # ---- Main loop ----
          start = 0
          total_scanned = 0
          while True:
              page = search_issues(JQL, start_at=start, max_results=50)
              issues = page.get("issues", [])
              if not issues:
                  break

              for issue in issues:
                  key   = issue["key"]
                  fields= issue["fields"]
                  proj  = fields["project"]["key"]
                  itype = fields["issuetype"]["name"]
                  status= fields["status"]["name"]

                  # Double-guard
                  if proj != "PREC" or itype not in ("Mission","Release") or status == "Validated (Complete)":
                      continue

                  desc = fields.get("description") or ""
                  pairs = extract_pairs(desc if isinstance(desc, str) else get_issue_desc(key))
                  if not pairs:
                      print(f"{key}: no asset tree detected; skipping")
                      continue

                  existing = list_remote_links(key)
                  for cat, nm in pairs:
                      obj = aql_lookup(cat, nm)
                      if not obj:
                          print(f"{key}: not found in Assets (schema 3) → {cat} / {nm}")
                          continue
                      oid = obj.get("id")
                      url_ = asset_url(oid)
                      title = f"{cat} - {nm}"

                      if (title, url_) in existing:
                          print(f"{key}: link already exists → {title}")
                          continue

                      create_remote_link(key, title, url_)
                      existing.add((title, url_))
                      print(f"{key}: linked {title}")

                  total_scanned += 1
                  time.sleep(0.25)  # gentle rate limiting

              start = page.get("startAt", 0) + page.get("maxResults", 0)
              if start >= page.get("total", 0):
                  break

          print(f"Done. Issues scanned: {total_scanned}")
          PY
